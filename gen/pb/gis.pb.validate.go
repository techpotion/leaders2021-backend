// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gis.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LineString2D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LineString2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineString2D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LineString2DMultiError, or
// nil if none found.
func (m *LineString2D) ValidateAll() error {
	return m.validate(true)
}

func (m *LineString2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LineString2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LineString2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LineString2DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LineString2DMultiError(errors)
	}
	return nil
}

// LineString2DMultiError is an error wrapping multiple validation errors
// returned by LineString2D.ValidateAll() if the designated constraints aren't met.
type LineString2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineString2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineString2DMultiError) AllErrors() []error { return m }

// LineString2DValidationError is the validation error returned by
// LineString2D.Validate if the designated constraints aren't met.
type LineString2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineString2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineString2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineString2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineString2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineString2DValidationError) ErrorName() string { return "LineString2DValidationError" }

// Error satisfies the builtin error interface
func (e LineString2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineString2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineString2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineString2DValidationError{}

// Validate checks the field values on LineString3D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LineString3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineString3D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LineString3DMultiError, or
// nil if none found.
func (m *LineString3D) ValidateAll() error {
	return m.validate(true)
}

func (m *LineString3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LineString3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LineString3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LineString3DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LineString3DMultiError(errors)
	}
	return nil
}

// LineString3DMultiError is an error wrapping multiple validation errors
// returned by LineString3D.ValidateAll() if the designated constraints aren't met.
type LineString3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineString3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineString3DMultiError) AllErrors() []error { return m }

// LineString3DValidationError is the validation error returned by
// LineString3D.Validate if the designated constraints aren't met.
type LineString3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineString3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineString3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineString3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineString3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineString3DValidationError) ErrorName() string { return "LineString3DValidationError" }

// Error satisfies the builtin error interface
func (e LineString3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineString3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineString3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineString3DValidationError{}

// Validate checks the field values on MultiLineString2D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MultiLineString2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiLineString2D with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiLineString2DMultiError, or nil if none found.
func (m *MultiLineString2D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiLineString2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLineString() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiLineString2DValidationError{
						field:  fmt.Sprintf("LineString[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiLineString2DValidationError{
						field:  fmt.Sprintf("LineString[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiLineString2DValidationError{
					field:  fmt.Sprintf("LineString[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiLineString2DMultiError(errors)
	}
	return nil
}

// MultiLineString2DMultiError is an error wrapping multiple validation errors
// returned by MultiLineString2D.ValidateAll() if the designated constraints
// aren't met.
type MultiLineString2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiLineString2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiLineString2DMultiError) AllErrors() []error { return m }

// MultiLineString2DValidationError is the validation error returned by
// MultiLineString2D.Validate if the designated constraints aren't met.
type MultiLineString2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiLineString2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiLineString2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiLineString2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiLineString2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiLineString2DValidationError) ErrorName() string {
	return "MultiLineString2DValidationError"
}

// Error satisfies the builtin error interface
func (e MultiLineString2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiLineString2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiLineString2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiLineString2DValidationError{}

// Validate checks the field values on MultiLineString3D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MultiLineString3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiLineString3D with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiLineString3DMultiError, or nil if none found.
func (m *MultiLineString3D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiLineString3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLineString() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiLineString3DValidationError{
						field:  fmt.Sprintf("LineString[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiLineString3DValidationError{
						field:  fmt.Sprintf("LineString[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiLineString3DValidationError{
					field:  fmt.Sprintf("LineString[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiLineString3DMultiError(errors)
	}
	return nil
}

// MultiLineString3DMultiError is an error wrapping multiple validation errors
// returned by MultiLineString3D.ValidateAll() if the designated constraints
// aren't met.
type MultiLineString3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiLineString3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiLineString3DMultiError) AllErrors() []error { return m }

// MultiLineString3DValidationError is the validation error returned by
// MultiLineString3D.Validate if the designated constraints aren't met.
type MultiLineString3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiLineString3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiLineString3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiLineString3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiLineString3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiLineString3DValidationError) ErrorName() string {
	return "MultiLineString3DValidationError"
}

// Error satisfies the builtin error interface
func (e MultiLineString3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiLineString3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiLineString3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiLineString3DValidationError{}

// Validate checks the field values on Point2D with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point2D with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Point2DMultiError, or nil if none found.
func (m *Point2D) ValidateAll() error {
	return m.validate(true)
}

func (m *Point2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return Point2DMultiError(errors)
	}
	return nil
}

// Point2DMultiError is an error wrapping multiple validation errors returned
// by Point2D.ValidateAll() if the designated constraints aren't met.
type Point2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Point2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Point2DMultiError) AllErrors() []error { return m }

// Point2DValidationError is the validation error returned by Point2D.Validate
// if the designated constraints aren't met.
type Point2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Point2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Point2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Point2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Point2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Point2DValidationError) ErrorName() string { return "Point2DValidationError" }

// Error satisfies the builtin error interface
func (e Point2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Point2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Point2DValidationError{}

// Validate checks the field values on Point3D with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point3D with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Point3DMultiError, or nil if none found.
func (m *Point3D) ValidateAll() error {
	return m.validate(true)
}

func (m *Point3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	if len(errors) > 0 {
		return Point3DMultiError(errors)
	}
	return nil
}

// Point3DMultiError is an error wrapping multiple validation errors returned
// by Point3D.ValidateAll() if the designated constraints aren't met.
type Point3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Point3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Point3DMultiError) AllErrors() []error { return m }

// Point3DValidationError is the validation error returned by Point3D.Validate
// if the designated constraints aren't met.
type Point3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Point3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Point3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Point3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Point3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Point3DValidationError) ErrorName() string { return "Point3DValidationError" }

// Error satisfies the builtin error interface
func (e Point3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Point3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Point3DValidationError{}

// Validate checks the field values on MultiPoint2D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultiPoint2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiPoint2D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultiPoint2DMultiError, or
// nil if none found.
func (m *MultiPoint2D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiPoint2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiPoint2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiPoint2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiPoint2DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiPoint2DMultiError(errors)
	}
	return nil
}

// MultiPoint2DMultiError is an error wrapping multiple validation errors
// returned by MultiPoint2D.ValidateAll() if the designated constraints aren't met.
type MultiPoint2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiPoint2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiPoint2DMultiError) AllErrors() []error { return m }

// MultiPoint2DValidationError is the validation error returned by
// MultiPoint2D.Validate if the designated constraints aren't met.
type MultiPoint2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiPoint2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiPoint2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiPoint2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiPoint2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiPoint2DValidationError) ErrorName() string { return "MultiPoint2DValidationError" }

// Error satisfies the builtin error interface
func (e MultiPoint2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiPoint2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiPoint2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiPoint2DValidationError{}

// Validate checks the field values on MultiPoint3D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultiPoint3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiPoint3D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultiPoint3DMultiError, or
// nil if none found.
func (m *MultiPoint3D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiPoint3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiPoint3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiPoint3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiPoint3DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiPoint3DMultiError(errors)
	}
	return nil
}

// MultiPoint3DMultiError is an error wrapping multiple validation errors
// returned by MultiPoint3D.ValidateAll() if the designated constraints aren't met.
type MultiPoint3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiPoint3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiPoint3DMultiError) AllErrors() []error { return m }

// MultiPoint3DValidationError is the validation error returned by
// MultiPoint3D.Validate if the designated constraints aren't met.
type MultiPoint3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiPoint3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiPoint3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiPoint3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiPoint3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiPoint3DValidationError) ErrorName() string { return "MultiPoint3DValidationError" }

// Error satisfies the builtin error interface
func (e MultiPoint3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiPoint3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiPoint3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiPoint3DValidationError{}

// Validate checks the field values on Polygon2D with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Polygon2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Polygon2D with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Polygon2DMultiError, or nil
// if none found.
func (m *Polygon2D) ValidateAll() error {
	return m.validate(true)
}

func (m *Polygon2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Polygon2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Polygon2DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Polygon2DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Polygon2DMultiError(errors)
	}
	return nil
}

// Polygon2DMultiError is an error wrapping multiple validation errors returned
// by Polygon2D.ValidateAll() if the designated constraints aren't met.
type Polygon2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Polygon2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Polygon2DMultiError) AllErrors() []error { return m }

// Polygon2DValidationError is the validation error returned by
// Polygon2D.Validate if the designated constraints aren't met.
type Polygon2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Polygon2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Polygon2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Polygon2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Polygon2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Polygon2DValidationError) ErrorName() string { return "Polygon2DValidationError" }

// Error satisfies the builtin error interface
func (e Polygon2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygon2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Polygon2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Polygon2DValidationError{}

// Validate checks the field values on Polygon3D with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Polygon3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Polygon3D with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Polygon3DMultiError, or nil
// if none found.
func (m *Polygon3D) ValidateAll() error {
	return m.validate(true)
}

func (m *Polygon3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Polygon3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Polygon3DValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Polygon3DValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Polygon3DMultiError(errors)
	}
	return nil
}

// Polygon3DMultiError is an error wrapping multiple validation errors returned
// by Polygon3D.ValidateAll() if the designated constraints aren't met.
type Polygon3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Polygon3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Polygon3DMultiError) AllErrors() []error { return m }

// Polygon3DValidationError is the validation error returned by
// Polygon3D.Validate if the designated constraints aren't met.
type Polygon3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Polygon3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Polygon3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Polygon3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Polygon3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Polygon3DValidationError) ErrorName() string { return "Polygon3DValidationError" }

// Error satisfies the builtin error interface
func (e Polygon3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygon3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Polygon3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Polygon3DValidationError{}

// Validate checks the field values on MultiPolygon2D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultiPolygon2D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiPolygon2D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultiPolygon2DMultiError,
// or nil if none found.
func (m *MultiPolygon2D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiPolygon2D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolygon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiPolygon2DValidationError{
						field:  fmt.Sprintf("Polygon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiPolygon2DValidationError{
						field:  fmt.Sprintf("Polygon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiPolygon2DValidationError{
					field:  fmt.Sprintf("Polygon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiPolygon2DMultiError(errors)
	}
	return nil
}

// MultiPolygon2DMultiError is an error wrapping multiple validation errors
// returned by MultiPolygon2D.ValidateAll() if the designated constraints
// aren't met.
type MultiPolygon2DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiPolygon2DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiPolygon2DMultiError) AllErrors() []error { return m }

// MultiPolygon2DValidationError is the validation error returned by
// MultiPolygon2D.Validate if the designated constraints aren't met.
type MultiPolygon2DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiPolygon2DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiPolygon2DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiPolygon2DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiPolygon2DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiPolygon2DValidationError) ErrorName() string { return "MultiPolygon2DValidationError" }

// Error satisfies the builtin error interface
func (e MultiPolygon2DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiPolygon2D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiPolygon2DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiPolygon2DValidationError{}

// Validate checks the field values on MultiPolygon3D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultiPolygon3D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiPolygon3D with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultiPolygon3DMultiError,
// or nil if none found.
func (m *MultiPolygon3D) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiPolygon3D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolygon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiPolygon3DValidationError{
						field:  fmt.Sprintf("Polygon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiPolygon3DValidationError{
						field:  fmt.Sprintf("Polygon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiPolygon3DValidationError{
					field:  fmt.Sprintf("Polygon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiPolygon3DMultiError(errors)
	}
	return nil
}

// MultiPolygon3DMultiError is an error wrapping multiple validation errors
// returned by MultiPolygon3D.ValidateAll() if the designated constraints
// aren't met.
type MultiPolygon3DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiPolygon3DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiPolygon3DMultiError) AllErrors() []error { return m }

// MultiPolygon3DValidationError is the validation error returned by
// MultiPolygon3D.Validate if the designated constraints aren't met.
type MultiPolygon3DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiPolygon3DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiPolygon3DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiPolygon3DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiPolygon3DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiPolygon3DValidationError) ErrorName() string { return "MultiPolygon3DValidationError" }

// Error satisfies the builtin error interface
func (e MultiPolygon3DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiPolygon3D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiPolygon3DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiPolygon3DValidationError{}
