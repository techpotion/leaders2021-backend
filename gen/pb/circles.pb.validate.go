// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: circles.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Intersections with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intersections) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intersections with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntersectionsMultiError, or
// nil if none found.
func (m *Intersections) ValidateAll() error {
	return m.validate(true)
}

func (m *Intersections) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntersectionsMultiError(errors)
	}
	return nil
}

// IntersectionsMultiError is an error wrapping multiple validation errors
// returned by Intersections.ValidateAll() if the designated constraints
// aren't met.
type IntersectionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntersectionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntersectionsMultiError) AllErrors() []error { return m }

// IntersectionsValidationError is the validation error returned by
// Intersections.Validate if the designated constraints aren't met.
type IntersectionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntersectionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntersectionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntersectionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntersectionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntersectionsValidationError) ErrorName() string { return "IntersectionsValidationError" }

// Error satisfies the builtin error interface
func (e IntersectionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntersections.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntersectionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntersectionsValidationError{}

// Validate checks the field values on Unions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Unions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unions with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UnionsMultiError, or nil if none found.
func (m *Unions) ValidateAll() error {
	return m.validate(true)
}

func (m *Unions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnionsMultiError(errors)
	}
	return nil
}

// UnionsMultiError is an error wrapping multiple validation errors returned by
// Unions.ValidateAll() if the designated constraints aren't met.
type UnionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnionsMultiError) AllErrors() []error { return m }

// UnionsValidationError is the validation error returned by Unions.Validate if
// the designated constraints aren't met.
type UnionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionsValidationError) ErrorName() string { return "UnionsValidationError" }

// Error satisfies the builtin error interface
func (e UnionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionsValidationError{}

// Validate checks the field values on Intersections_ListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Intersections_ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intersections_ListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Intersections_ListRequestMultiError, or nil if none found.
func (m *Intersections_ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Intersections_ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Intersections_ListRequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Intersections_ListRequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Intersections_ListRequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSportsAreaNames() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportsAreaTypes() {
		_, _ = idx, item

		if item != "" {

		}

	}

	// no validation rules for Availability

	for idx, item := range m.GetSportKinds() {
		_, _ = idx, item

		if item != "" {

		}

	}

	// no validation rules for WithUnion

	if len(errors) > 0 {
		return Intersections_ListRequestMultiError(errors)
	}
	return nil
}

// Intersections_ListRequestMultiError is an error wrapping multiple validation
// errors returned by Intersections_ListRequest.ValidateAll() if the
// designated constraints aren't met.
type Intersections_ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Intersections_ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Intersections_ListRequestMultiError) AllErrors() []error { return m }

// Intersections_ListRequestValidationError is the validation error returned by
// Intersections_ListRequest.Validate if the designated constraints aren't met.
type Intersections_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Intersections_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Intersections_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Intersections_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Intersections_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Intersections_ListRequestValidationError) ErrorName() string {
	return "Intersections_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Intersections_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntersections_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Intersections_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Intersections_ListRequestValidationError{}

// Validate checks the field values on Intersections_ListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Intersections_ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intersections_ListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Intersections_ListResponseMultiError, or nil if none found.
func (m *Intersections_ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Intersections_ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntersections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Intersections_ListResponseValidationError{
						field:  fmt.Sprintf("Intersections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Intersections_ListResponseValidationError{
						field:  fmt.Sprintf("Intersections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Intersections_ListResponseValidationError{
					field:  fmt.Sprintf("Intersections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Intersections_ListResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Intersections_ListResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Intersections_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUnions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Intersections_ListResponseValidationError{
						field:  fmt.Sprintf("Unions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Intersections_ListResponseValidationError{
						field:  fmt.Sprintf("Unions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Intersections_ListResponseValidationError{
					field:  fmt.Sprintf("Unions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUnionsListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Intersections_ListResponseValidationError{
					field:  "UnionsListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Intersections_ListResponseValidationError{
					field:  "UnionsListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnionsListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Intersections_ListResponseValidationError{
				field:  "UnionsListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Intersections_ListResponseMultiError(errors)
	}
	return nil
}

// Intersections_ListResponseMultiError is an error wrapping multiple
// validation errors returned by Intersections_ListResponse.ValidateAll() if
// the designated constraints aren't met.
type Intersections_ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Intersections_ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Intersections_ListResponseMultiError) AllErrors() []error { return m }

// Intersections_ListResponseValidationError is the validation error returned
// by Intersections_ListResponse.Validate if the designated constraints aren't met.
type Intersections_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Intersections_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Intersections_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Intersections_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Intersections_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Intersections_ListResponseValidationError) ErrorName() string {
	return "Intersections_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Intersections_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntersections_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Intersections_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Intersections_ListResponseValidationError{}

// Validate checks the field values on Unions_ListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Unions_ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unions_ListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unions_ListRequestMultiError, or nil if none found.
func (m *Unions_ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Unions_ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Unions_ListRequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Unions_ListRequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Unions_ListRequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSportsAreaNames() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportsAreaTypes() {
		_, _ = idx, item

		if item != "" {

		}

	}

	// no validation rules for Availability

	for idx, item := range m.GetSportKinds() {
		_, _ = idx, item

		if item != "" {

		}

	}

	if len(errors) > 0 {
		return Unions_ListRequestMultiError(errors)
	}
	return nil
}

// Unions_ListRequestMultiError is an error wrapping multiple validation errors
// returned by Unions_ListRequest.ValidateAll() if the designated constraints
// aren't met.
type Unions_ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unions_ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unions_ListRequestMultiError) AllErrors() []error { return m }

// Unions_ListRequestValidationError is the validation error returned by
// Unions_ListRequest.Validate if the designated constraints aren't met.
type Unions_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unions_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unions_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unions_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unions_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unions_ListRequestValidationError) ErrorName() string {
	return "Unions_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Unions_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnions_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unions_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unions_ListRequestValidationError{}

// Validate checks the field values on Unions_ListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Unions_ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unions_ListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unions_ListResponseMultiError, or nil if none found.
func (m *Unions_ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Unions_ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Unions_ListResponseValidationError{
						field:  fmt.Sprintf("Unions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Unions_ListResponseValidationError{
						field:  fmt.Sprintf("Unions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Unions_ListResponseValidationError{
					field:  fmt.Sprintf("Unions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Unions_ListResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Unions_ListResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Unions_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Unions_ListResponseMultiError(errors)
	}
	return nil
}

// Unions_ListResponseMultiError is an error wrapping multiple validation
// errors returned by Unions_ListResponse.ValidateAll() if the designated
// constraints aren't met.
type Unions_ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unions_ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unions_ListResponseMultiError) AllErrors() []error { return m }

// Unions_ListResponseValidationError is the validation error returned by
// Unions_ListResponse.Validate if the designated constraints aren't met.
type Unions_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unions_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unions_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unions_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unions_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unions_ListResponseValidationError) ErrorName() string {
	return "Unions_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Unions_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnions_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unions_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unions_ListResponseValidationError{}
