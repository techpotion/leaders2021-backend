// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Pagination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNumber

	// no validation rules for ResultsPerPage

	return nil
}

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on ListStats with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListStats) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// ListStatsValidationError is the validation error returned by
// ListStats.Validate if the designated constraints aren't met.
type ListStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStatsValidationError) ErrorName() string { return "ListStatsValidationError" }

// Error satisfies the builtin error interface
func (e ListStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStatsValidationError{}

// Validate checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Point) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lat

	// no validation rules for Lng

	return nil
}

// PointValidationError is the validation error returned by Point.Validate if
// the designated constraints aren't met.
type PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointValidationError) ErrorName() string { return "PointValidationError" }

// Error satisfies the builtin error interface
func (e PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointValidationError{}

// Validate checks the field values on SportsObjectDetailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SportsObjectDetailed) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ObjectId

	// no validation rules for ObjectName

	if v, ok := interface{}(m.GetObjectPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SportsObjectDetailedValidationError{
				field:  "ObjectPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DepartmentalOrganizationId

	// no validation rules for DepartmentalOrganizationName

	// no validation rules for SportsAreaId

	// no validation rules for SportsAreaName

	// no validation rules for SportsAreaType

	// no validation rules for Availability

	// no validation rules for SportKind

	return nil
}

// SportsObjectDetailedValidationError is the validation error returned by
// SportsObjectDetailed.Validate if the designated constraints aren't met.
type SportsObjectDetailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SportsObjectDetailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SportsObjectDetailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SportsObjectDetailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SportsObjectDetailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SportsObjectDetailedValidationError) ErrorName() string {
	return "SportsObjectDetailedValidationError"
}

// Error satisfies the builtin error interface
func (e SportsObjectDetailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSportsObjectDetailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SportsObjectDetailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SportsObjectDetailedValidationError{}
