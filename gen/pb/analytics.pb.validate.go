// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: analytics.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolygonAnalytics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolygonAnalytics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonAnalyticsMultiError, or nil if none found.
func (m *PolygonAnalytics) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalytics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PolygonAnalyticsMultiError(errors)
	}
	return nil
}

// PolygonAnalyticsMultiError is an error wrapping multiple validation errors
// returned by PolygonAnalytics.ValidateAll() if the designated constraints
// aren't met.
type PolygonAnalyticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalyticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalyticsMultiError) AllErrors() []error { return m }

// PolygonAnalyticsValidationError is the validation error returned by
// PolygonAnalytics.Validate if the designated constraints aren't met.
type PolygonAnalyticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalyticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalyticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalyticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalyticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalyticsValidationError) ErrorName() string { return "PolygonAnalyticsValidationError" }

// Error satisfies the builtin error interface
func (e PolygonAnalyticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalyticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalyticsValidationError{}

// Validate checks the field values on PolygonParkAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonParkAnalytics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonParkAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonParkAnalyticsMultiError, or nil if none found.
func (m *PolygonParkAnalytics) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonParkAnalytics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PolygonParkAnalyticsMultiError(errors)
	}
	return nil
}

// PolygonParkAnalyticsMultiError is an error wrapping multiple validation
// errors returned by PolygonParkAnalytics.ValidateAll() if the designated
// constraints aren't met.
type PolygonParkAnalyticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonParkAnalyticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonParkAnalyticsMultiError) AllErrors() []error { return m }

// PolygonParkAnalyticsValidationError is the validation error returned by
// PolygonParkAnalytics.Validate if the designated constraints aren't met.
type PolygonParkAnalyticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonParkAnalyticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonParkAnalyticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonParkAnalyticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonParkAnalyticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonParkAnalyticsValidationError) ErrorName() string {
	return "PolygonParkAnalyticsValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonParkAnalyticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonParkAnalytics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonParkAnalyticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonParkAnalyticsValidationError{}

// Validate checks the field values on PolygonPollutionAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonPollutionAnalytics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonPollutionAnalytics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonPollutionAnalyticsMultiError, or nil if none found.
func (m *PolygonPollutionAnalytics) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonPollutionAnalytics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PolygonPollutionAnalyticsMultiError(errors)
	}
	return nil
}

// PolygonPollutionAnalyticsMultiError is an error wrapping multiple validation
// errors returned by PolygonPollutionAnalytics.ValidateAll() if the
// designated constraints aren't met.
type PolygonPollutionAnalyticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonPollutionAnalyticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonPollutionAnalyticsMultiError) AllErrors() []error { return m }

// PolygonPollutionAnalyticsValidationError is the validation error returned by
// PolygonPollutionAnalytics.Validate if the designated constraints aren't met.
type PolygonPollutionAnalyticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonPollutionAnalyticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonPollutionAnalyticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonPollutionAnalyticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonPollutionAnalyticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonPollutionAnalyticsValidationError) ErrorName() string {
	return "PolygonPollutionAnalyticsValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonPollutionAnalyticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonPollutionAnalytics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonPollutionAnalyticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonPollutionAnalyticsValidationError{}

// Validate checks the field values on PolygonSubwayAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonSubwayAnalytics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonSubwayAnalytics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonSubwayAnalyticsMultiError, or nil if none found.
func (m *PolygonSubwayAnalytics) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonSubwayAnalytics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PolygonSubwayAnalyticsMultiError(errors)
	}
	return nil
}

// PolygonSubwayAnalyticsMultiError is an error wrapping multiple validation
// errors returned by PolygonSubwayAnalytics.ValidateAll() if the designated
// constraints aren't met.
type PolygonSubwayAnalyticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonSubwayAnalyticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonSubwayAnalyticsMultiError) AllErrors() []error { return m }

// PolygonSubwayAnalyticsValidationError is the validation error returned by
// PolygonSubwayAnalytics.Validate if the designated constraints aren't met.
type PolygonSubwayAnalyticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonSubwayAnalyticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonSubwayAnalyticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonSubwayAnalyticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonSubwayAnalyticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonSubwayAnalyticsValidationError) ErrorName() string {
	return "PolygonSubwayAnalyticsValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonSubwayAnalyticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonSubwayAnalytics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonSubwayAnalyticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonSubwayAnalyticsValidationError{}

// Validate checks the field values on PolygonAnalyticsDashboard with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonAnalyticsDashboard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalyticsDashboard with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonAnalyticsDashboardMultiError, or nil if none found.
func (m *PolygonAnalyticsDashboard) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalyticsDashboard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PolygonAnalyticsDashboardMultiError(errors)
	}
	return nil
}

// PolygonAnalyticsDashboardMultiError is an error wrapping multiple validation
// errors returned by PolygonAnalyticsDashboard.ValidateAll() if the
// designated constraints aren't met.
type PolygonAnalyticsDashboardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalyticsDashboardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalyticsDashboardMultiError) AllErrors() []error { return m }

// PolygonAnalyticsDashboardValidationError is the validation error returned by
// PolygonAnalyticsDashboard.Validate if the designated constraints aren't met.
type PolygonAnalyticsDashboardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalyticsDashboardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalyticsDashboardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalyticsDashboardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalyticsDashboardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalyticsDashboardValidationError) ErrorName() string {
	return "PolygonAnalyticsDashboardValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalyticsDashboardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalyticsDashboard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalyticsDashboardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalyticsDashboardValidationError{}

// Validate checks the field values on Marks with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Marks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Marks with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MarksMultiError, or nil if none found.
func (m *Marks) ValidateAll() error {
	return m.validate(true)
}

func (m *Marks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarksMultiError(errors)
	}
	return nil
}

// MarksMultiError is an error wrapping multiple validation errors returned by
// Marks.ValidateAll() if the designated constraints aren't met.
type MarksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarksMultiError) AllErrors() []error { return m }

// MarksValidationError is the validation error returned by Marks.Validate if
// the designated constraints aren't met.
type MarksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarksValidationError) ErrorName() string { return "MarksValidationError" }

// Error satisfies the builtin error interface
func (e MarksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarksValidationError{}

// Validate checks the field values on PolygonAnalytics_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonAnalytics_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalytics_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonAnalytics_RequestMultiError, or nil if none found.
func (m *PolygonAnalytics_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalytics_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalytics_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSportsAreaNames() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportsAreaTypes() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportKinds() {
		_, _ = idx, item

		if item != "" {

		}

	}

	if len(errors) > 0 {
		return PolygonAnalytics_RequestMultiError(errors)
	}
	return nil
}

// PolygonAnalytics_RequestMultiError is an error wrapping multiple validation
// errors returned by PolygonAnalytics_Request.ValidateAll() if the designated
// constraints aren't met.
type PolygonAnalytics_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalytics_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalytics_RequestMultiError) AllErrors() []error { return m }

// PolygonAnalytics_RequestValidationError is the validation error returned by
// PolygonAnalytics_Request.Validate if the designated constraints aren't met.
type PolygonAnalytics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalytics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalytics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalytics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalytics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalytics_RequestValidationError) ErrorName() string {
	return "PolygonAnalytics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalytics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalytics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalytics_RequestValidationError{}

// Validate checks the field values on PolygonAnalytics_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonAnalytics_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalytics_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonAnalytics_ResponseMultiError, or nil if none found.
func (m *PolygonAnalytics_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalytics_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreasSquare

	// no validation rules for AreasSquarePer100K

	// no validation rules for AreasAmount

	// no validation rules for AreasAmountPer100K

	// no validation rules for SportsAmount

	// no validation rules for SportsAmountPer100K

	// no validation rules for AreaTypesAmount

	// no validation rules for SportsObjectsAmount

	// no validation rules for SportsObjectsAmountPer100K

	// no validation rules for Density

	if len(errors) > 0 {
		return PolygonAnalytics_ResponseMultiError(errors)
	}
	return nil
}

// PolygonAnalytics_ResponseMultiError is an error wrapping multiple validation
// errors returned by PolygonAnalytics_Response.ValidateAll() if the
// designated constraints aren't met.
type PolygonAnalytics_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalytics_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalytics_ResponseMultiError) AllErrors() []error { return m }

// PolygonAnalytics_ResponseValidationError is the validation error returned by
// PolygonAnalytics_Response.Validate if the designated constraints aren't met.
type PolygonAnalytics_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalytics_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalytics_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalytics_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalytics_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalytics_ResponseValidationError) ErrorName() string {
	return "PolygonAnalytics_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalytics_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalytics_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalytics_ResponseValidationError{}

// Validate checks the field values on PolygonParkAnalytics_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonParkAnalytics_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonParkAnalytics_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolygonParkAnalytics_RequestMultiError, or nil if none found.
func (m *PolygonParkAnalytics_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonParkAnalytics_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonParkAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonParkAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonParkAnalytics_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HasSportground

	if len(errors) > 0 {
		return PolygonParkAnalytics_RequestMultiError(errors)
	}
	return nil
}

// PolygonParkAnalytics_RequestMultiError is an error wrapping multiple
// validation errors returned by PolygonParkAnalytics_Request.ValidateAll() if
// the designated constraints aren't met.
type PolygonParkAnalytics_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonParkAnalytics_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonParkAnalytics_RequestMultiError) AllErrors() []error { return m }

// PolygonParkAnalytics_RequestValidationError is the validation error returned
// by PolygonParkAnalytics_Request.Validate if the designated constraints
// aren't met.
type PolygonParkAnalytics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonParkAnalytics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonParkAnalytics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonParkAnalytics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonParkAnalytics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonParkAnalytics_RequestValidationError) ErrorName() string {
	return "PolygonParkAnalytics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonParkAnalytics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonParkAnalytics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonParkAnalytics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonParkAnalytics_RequestValidationError{}

// Validate checks the field values on PolygonParkAnalytics_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonParkAnalytics_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonParkAnalytics_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PolygonParkAnalytics_ResponseMultiError, or nil if none found.
func (m *PolygonParkAnalytics_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonParkAnalytics_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolygonParkAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Parks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolygonParkAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Parks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolygonParkAnalytics_ResponseValidationError{
					field:  fmt.Sprintf("Parks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonParkAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonParkAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonParkAnalytics_ResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolygonParkAnalytics_ResponseMultiError(errors)
	}
	return nil
}

// PolygonParkAnalytics_ResponseMultiError is an error wrapping multiple
// validation errors returned by PolygonParkAnalytics_Response.ValidateAll()
// if the designated constraints aren't met.
type PolygonParkAnalytics_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonParkAnalytics_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonParkAnalytics_ResponseMultiError) AllErrors() []error { return m }

// PolygonParkAnalytics_ResponseValidationError is the validation error
// returned by PolygonParkAnalytics_Response.Validate if the designated
// constraints aren't met.
type PolygonParkAnalytics_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonParkAnalytics_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonParkAnalytics_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonParkAnalytics_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonParkAnalytics_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonParkAnalytics_ResponseValidationError) ErrorName() string {
	return "PolygonParkAnalytics_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonParkAnalytics_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonParkAnalytics_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonParkAnalytics_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonParkAnalytics_ResponseValidationError{}

// Validate checks the field values on PolygonPollutionAnalytics_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PolygonPollutionAnalytics_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonPollutionAnalytics_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PolygonPollutionAnalytics_RequestMultiError, or nil if none found.
func (m *PolygonPollutionAnalytics_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonPollutionAnalytics_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonPollutionAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonPollutionAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonPollutionAnalytics_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsPolluted

	// no validation rules for ReturnPoints

	if len(errors) > 0 {
		return PolygonPollutionAnalytics_RequestMultiError(errors)
	}
	return nil
}

// PolygonPollutionAnalytics_RequestMultiError is an error wrapping multiple
// validation errors returned by
// PolygonPollutionAnalytics_Request.ValidateAll() if the designated
// constraints aren't met.
type PolygonPollutionAnalytics_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonPollutionAnalytics_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonPollutionAnalytics_RequestMultiError) AllErrors() []error { return m }

// PolygonPollutionAnalytics_RequestValidationError is the validation error
// returned by PolygonPollutionAnalytics_Request.Validate if the designated
// constraints aren't met.
type PolygonPollutionAnalytics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonPollutionAnalytics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonPollutionAnalytics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonPollutionAnalytics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonPollutionAnalytics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonPollutionAnalytics_RequestValidationError) ErrorName() string {
	return "PolygonPollutionAnalytics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonPollutionAnalytics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonPollutionAnalytics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonPollutionAnalytics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonPollutionAnalytics_RequestValidationError{}

// Validate checks the field values on PolygonPollutionAnalytics_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PolygonPollutionAnalytics_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonPollutionAnalytics_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PolygonPollutionAnalytics_ResponseMultiError, or nil if none found.
func (m *PolygonPollutionAnalytics_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonPollutionAnalytics_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolygonPollutionAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolygonPollutionAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolygonPollutionAnalytics_ResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PollutionPercentage

	if all {
		switch v := interface{}(m.GetListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonPollutionAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonPollutionAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonPollutionAnalytics_ResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolygonPollutionAnalytics_ResponseMultiError(errors)
	}
	return nil
}

// PolygonPollutionAnalytics_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// PolygonPollutionAnalytics_Response.ValidateAll() if the designated
// constraints aren't met.
type PolygonPollutionAnalytics_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonPollutionAnalytics_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonPollutionAnalytics_ResponseMultiError) AllErrors() []error { return m }

// PolygonPollutionAnalytics_ResponseValidationError is the validation error
// returned by PolygonPollutionAnalytics_Response.Validate if the designated
// constraints aren't met.
type PolygonPollutionAnalytics_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonPollutionAnalytics_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonPollutionAnalytics_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonPollutionAnalytics_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonPollutionAnalytics_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonPollutionAnalytics_ResponseValidationError) ErrorName() string {
	return "PolygonPollutionAnalytics_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonPollutionAnalytics_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonPollutionAnalytics_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonPollutionAnalytics_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonPollutionAnalytics_ResponseValidationError{}

// Validate checks the field values on PolygonSubwayAnalytics_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonSubwayAnalytics_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonSubwayAnalytics_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PolygonSubwayAnalytics_RequestMultiError, or nil if none found.
func (m *PolygonSubwayAnalytics_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonSubwayAnalytics_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonSubwayAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonSubwayAnalytics_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonSubwayAnalytics_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolygonSubwayAnalytics_RequestMultiError(errors)
	}
	return nil
}

// PolygonSubwayAnalytics_RequestMultiError is an error wrapping multiple
// validation errors returned by PolygonSubwayAnalytics_Request.ValidateAll()
// if the designated constraints aren't met.
type PolygonSubwayAnalytics_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonSubwayAnalytics_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonSubwayAnalytics_RequestMultiError) AllErrors() []error { return m }

// PolygonSubwayAnalytics_RequestValidationError is the validation error
// returned by PolygonSubwayAnalytics_Request.Validate if the designated
// constraints aren't met.
type PolygonSubwayAnalytics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonSubwayAnalytics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonSubwayAnalytics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonSubwayAnalytics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonSubwayAnalytics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonSubwayAnalytics_RequestValidationError) ErrorName() string {
	return "PolygonSubwayAnalytics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonSubwayAnalytics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonSubwayAnalytics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonSubwayAnalytics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonSubwayAnalytics_RequestValidationError{}

// Validate checks the field values on PolygonSubwayAnalytics_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolygonSubwayAnalytics_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonSubwayAnalytics_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PolygonSubwayAnalytics_ResponseMultiError, or nil if none found.
func (m *PolygonSubwayAnalytics_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonSubwayAnalytics_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolygonSubwayAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolygonSubwayAnalytics_ResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolygonSubwayAnalytics_ResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetListStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonSubwayAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonSubwayAnalytics_ResponseValidationError{
					field:  "ListStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonSubwayAnalytics_ResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolygonSubwayAnalytics_ResponseMultiError(errors)
	}
	return nil
}

// PolygonSubwayAnalytics_ResponseMultiError is an error wrapping multiple
// validation errors returned by PolygonSubwayAnalytics_Response.ValidateAll()
// if the designated constraints aren't met.
type PolygonSubwayAnalytics_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonSubwayAnalytics_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonSubwayAnalytics_ResponseMultiError) AllErrors() []error { return m }

// PolygonSubwayAnalytics_ResponseValidationError is the validation error
// returned by PolygonSubwayAnalytics_Response.Validate if the designated
// constraints aren't met.
type PolygonSubwayAnalytics_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonSubwayAnalytics_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonSubwayAnalytics_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonSubwayAnalytics_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonSubwayAnalytics_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonSubwayAnalytics_ResponseValidationError) ErrorName() string {
	return "PolygonSubwayAnalytics_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonSubwayAnalytics_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonSubwayAnalytics_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonSubwayAnalytics_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonSubwayAnalytics_ResponseValidationError{}

// Validate checks the field values on PolygonAnalyticsDashboard_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PolygonAnalyticsDashboard_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalyticsDashboard_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PolygonAnalyticsDashboard_RequestMultiError, or nil if none found.
func (m *PolygonAnalyticsDashboard_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalyticsDashboard_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolygon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_RequestValidationError{
					field:  "Polygon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalyticsDashboard_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSportsAreaNames() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportsAreaTypes() {
		_, _ = idx, item

		if item != "" {

		}

	}

	for idx, item := range m.GetSportKinds() {
		_, _ = idx, item

		if item != "" {

		}

	}

	if len(errors) > 0 {
		return PolygonAnalyticsDashboard_RequestMultiError(errors)
	}
	return nil
}

// PolygonAnalyticsDashboard_RequestMultiError is an error wrapping multiple
// validation errors returned by
// PolygonAnalyticsDashboard_Request.ValidateAll() if the designated
// constraints aren't met.
type PolygonAnalyticsDashboard_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalyticsDashboard_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalyticsDashboard_RequestMultiError) AllErrors() []error { return m }

// PolygonAnalyticsDashboard_RequestValidationError is the validation error
// returned by PolygonAnalyticsDashboard_Request.Validate if the designated
// constraints aren't met.
type PolygonAnalyticsDashboard_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalyticsDashboard_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalyticsDashboard_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalyticsDashboard_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalyticsDashboard_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalyticsDashboard_RequestValidationError) ErrorName() string {
	return "PolygonAnalyticsDashboard_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalyticsDashboard_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalyticsDashboard_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalyticsDashboard_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalyticsDashboard_RequestValidationError{}

// Validate checks the field values on PolygonAnalyticsDashboard_Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PolygonAnalyticsDashboard_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolygonAnalyticsDashboard_Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PolygonAnalyticsDashboard_ResponseMultiError, or nil if none found.
func (m *PolygonAnalyticsDashboard_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PolygonAnalyticsDashboard_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasicAnalytics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "BasicAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "BasicAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasicAnalytics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalyticsDashboard_ResponseValidationError{
				field:  "BasicAnalytics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParkAnalytics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "ParkAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "ParkAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParkAnalytics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalyticsDashboard_ResponseValidationError{
				field:  "ParkAnalytics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPollutionAnalytics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "PollutionAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "PollutionAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollutionAnalytics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalyticsDashboard_ResponseValidationError{
				field:  "PollutionAnalytics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubwayAnalytics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "SubwayAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolygonAnalyticsDashboard_ResponseValidationError{
					field:  "SubwayAnalytics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubwayAnalytics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalyticsDashboard_ResponseValidationError{
				field:  "SubwayAnalytics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mark

	if len(errors) > 0 {
		return PolygonAnalyticsDashboard_ResponseMultiError(errors)
	}
	return nil
}

// PolygonAnalyticsDashboard_ResponseMultiError is an error wrapping multiple
// validation errors returned by
// PolygonAnalyticsDashboard_Response.ValidateAll() if the designated
// constraints aren't met.
type PolygonAnalyticsDashboard_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonAnalyticsDashboard_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonAnalyticsDashboard_ResponseMultiError) AllErrors() []error { return m }

// PolygonAnalyticsDashboard_ResponseValidationError is the validation error
// returned by PolygonAnalyticsDashboard_Response.Validate if the designated
// constraints aren't met.
type PolygonAnalyticsDashboard_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalyticsDashboard_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalyticsDashboard_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalyticsDashboard_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalyticsDashboard_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalyticsDashboard_ResponseValidationError) ErrorName() string {
	return "PolygonAnalyticsDashboard_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalyticsDashboard_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalyticsDashboard_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalyticsDashboard_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalyticsDashboard_ResponseValidationError{}

// Validate checks the field values on Marks_GetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Marks_GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Marks_GetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Marks_GetRequestMultiError, or nil if none found.
func (m *Marks_GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Marks_GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreasAmountPer100K

	// no validation rules for SportsAmountPer100K

	// no validation rules for AreasSquarePer100K

	// no validation rules for SubwayDistance

	// no validation rules for PollutionPercentage

	if len(errors) > 0 {
		return Marks_GetRequestMultiError(errors)
	}
	return nil
}

// Marks_GetRequestMultiError is an error wrapping multiple validation errors
// returned by Marks_GetRequest.ValidateAll() if the designated constraints
// aren't met.
type Marks_GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Marks_GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Marks_GetRequestMultiError) AllErrors() []error { return m }

// Marks_GetRequestValidationError is the validation error returned by
// Marks_GetRequest.Validate if the designated constraints aren't met.
type Marks_GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Marks_GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Marks_GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Marks_GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Marks_GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Marks_GetRequestValidationError) ErrorName() string { return "Marks_GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e Marks_GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarks_GetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Marks_GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Marks_GetRequestValidationError{}

// Validate checks the field values on Marks_GetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Marks_GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Marks_GetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Marks_GetResponseMultiError, or nil if none found.
func (m *Marks_GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Marks_GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mark

	if len(errors) > 0 {
		return Marks_GetResponseMultiError(errors)
	}
	return nil
}

// Marks_GetResponseMultiError is an error wrapping multiple validation errors
// returned by Marks_GetResponse.ValidateAll() if the designated constraints
// aren't met.
type Marks_GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Marks_GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Marks_GetResponseMultiError) AllErrors() []error { return m }

// Marks_GetResponseValidationError is the validation error returned by
// Marks_GetResponse.Validate if the designated constraints aren't met.
type Marks_GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Marks_GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Marks_GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Marks_GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Marks_GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Marks_GetResponseValidationError) ErrorName() string {
	return "Marks_GetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Marks_GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarks_GetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Marks_GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Marks_GetResponseValidationError{}
