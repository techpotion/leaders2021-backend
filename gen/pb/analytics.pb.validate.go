// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: analytics.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PolygonAnalytics with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PolygonAnalytics) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PolygonAnalyticsValidationError is the validation error returned by
// PolygonAnalytics.Validate if the designated constraints aren't met.
type PolygonAnalyticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalyticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalyticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalyticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalyticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalyticsValidationError) ErrorName() string { return "PolygonAnalyticsValidationError" }

// Error satisfies the builtin error interface
func (e PolygonAnalyticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalyticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalyticsValidationError{}

// Validate checks the field values on PolygonAnalytics_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PolygonAnalytics_Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolygon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolygonAnalytics_RequestValidationError{
				field:  "Polygon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSportsAreaType() != "" {

	}

	// no validation rules for Availability

	if m.GetSportKind() != "" {

	}

	return nil
}

// PolygonAnalytics_RequestValidationError is the validation error returned by
// PolygonAnalytics_Request.Validate if the designated constraints aren't met.
type PolygonAnalytics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalytics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalytics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalytics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalytics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalytics_RequestValidationError) ErrorName() string {
	return "PolygonAnalytics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalytics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalytics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalytics_RequestValidationError{}

// Validate checks the field values on PolygonAnalytics_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PolygonAnalytics_Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AreasSquare

	// no validation rules for AreasAmount

	// no validation rules for SportsAmount

	return nil
}

// PolygonAnalytics_ResponseValidationError is the validation error returned by
// PolygonAnalytics_Response.Validate if the designated constraints aren't met.
type PolygonAnalytics_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonAnalytics_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonAnalytics_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonAnalytics_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonAnalytics_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonAnalytics_ResponseValidationError) ErrorName() string {
	return "PolygonAnalytics_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolygonAnalytics_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygonAnalytics_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonAnalytics_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonAnalytics_ResponseValidationError{}
