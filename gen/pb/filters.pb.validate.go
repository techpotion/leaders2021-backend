// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: filters.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ObjectsNames with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ObjectsNames) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ObjectsNamesValidationError is the validation error returned by
// ObjectsNames.Validate if the designated constraints aren't met.
type ObjectsNamesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsNamesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsNamesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsNamesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsNamesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsNamesValidationError) ErrorName() string { return "ObjectsNamesValidationError" }

// Error satisfies the builtin error interface
func (e ObjectsNamesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsNames.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsNamesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsNamesValidationError{}

// Validate checks the field values on DepartmentalOrganizationsIds with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DepartmentalOrganizationsIds) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DepartmentalOrganizationsIdsValidationError is the validation error returned
// by DepartmentalOrganizationsIds.Validate if the designated constraints
// aren't met.
type DepartmentalOrganizationsIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsIdsValidationError) ErrorName() string {
	return "DepartmentalOrganizationsIdsValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsIdsValidationError{}

// Validate checks the field values on DepartmentalOrganizationsNames with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DepartmentalOrganizationsNames) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DepartmentalOrganizationsNamesValidationError is the validation error
// returned by DepartmentalOrganizationsNames.Validate if the designated
// constraints aren't met.
type DepartmentalOrganizationsNamesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsNamesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsNamesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsNamesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsNamesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsNamesValidationError) ErrorName() string {
	return "DepartmentalOrganizationsNamesValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsNamesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsNames.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsNamesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsNamesValidationError{}

// Validate checks the field values on SportKinds with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SportKinds) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SportKindsValidationError is the validation error returned by
// SportKinds.Validate if the designated constraints aren't met.
type SportKindsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SportKindsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SportKindsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SportKindsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SportKindsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SportKindsValidationError) ErrorName() string { return "SportKindsValidationError" }

// Error satisfies the builtin error interface
func (e SportKindsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSportKinds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SportKindsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SportKindsValidationError{}

// Validate checks the field values on ObjectsNames_ListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ObjectsNames_ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ObjectsNames_ListRequestValidationError is the validation error returned by
// ObjectsNames_ListRequest.Validate if the designated constraints aren't met.
type ObjectsNames_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsNames_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsNames_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsNames_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsNames_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsNames_ListRequestValidationError) ErrorName() string {
	return "ObjectsNames_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsNames_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsNames_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsNames_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsNames_ListRequestValidationError{}

// Validate checks the field values on ObjectsNames_ListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ObjectsNames_ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectsNames_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ObjectsNames_ListResponseValidationError is the validation error returned by
// ObjectsNames_ListResponse.Validate if the designated constraints aren't met.
type ObjectsNames_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsNames_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsNames_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsNames_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsNames_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsNames_ListResponseValidationError) ErrorName() string {
	return "ObjectsNames_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsNames_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsNames_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsNames_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsNames_ListResponseValidationError{}

// Validate checks the field values on DepartmentalOrganizationsIds_ListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DepartmentalOrganizationsIds_ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DepartmentalOrganizationsIds_ListRequestValidationError is the validation
// error returned by DepartmentalOrganizationsIds_ListRequest.Validate if the
// designated constraints aren't met.
type DepartmentalOrganizationsIds_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsIds_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsIds_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsIds_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsIds_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsIds_ListRequestValidationError) ErrorName() string {
	return "DepartmentalOrganizationsIds_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsIds_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsIds_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsIds_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsIds_ListRequestValidationError{}

// Validate checks the field values on
// DepartmentalOrganizationsIds_ListResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DepartmentalOrganizationsIds_ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentalOrganizationsIds_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DepartmentalOrganizationsIds_ListResponseValidationError is the validation
// error returned by DepartmentalOrganizationsIds_ListResponse.Validate if the
// designated constraints aren't met.
type DepartmentalOrganizationsIds_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsIds_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsIds_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsIds_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsIds_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsIds_ListResponseValidationError) ErrorName() string {
	return "DepartmentalOrganizationsIds_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsIds_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsIds_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsIds_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsIds_ListResponseValidationError{}

// Validate checks the field values on
// DepartmentalOrganizationsNames_ListRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DepartmentalOrganizationsNames_ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DepartmentalOrganizationsNames_ListRequestValidationError is the validation
// error returned by DepartmentalOrganizationsNames_ListRequest.Validate if
// the designated constraints aren't met.
type DepartmentalOrganizationsNames_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsNames_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsNames_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsNames_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsNames_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsNames_ListRequestValidationError) ErrorName() string {
	return "DepartmentalOrganizationsNames_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsNames_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsNames_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsNames_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsNames_ListRequestValidationError{}

// Validate checks the field values on
// DepartmentalOrganizationsNames_ListResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DepartmentalOrganizationsNames_ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentalOrganizationsNames_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DepartmentalOrganizationsNames_ListResponseValidationError is the validation
// error returned by DepartmentalOrganizationsNames_ListResponse.Validate if
// the designated constraints aren't met.
type DepartmentalOrganizationsNames_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentalOrganizationsNames_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentalOrganizationsNames_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentalOrganizationsNames_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentalOrganizationsNames_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentalOrganizationsNames_ListResponseValidationError) ErrorName() string {
	return "DepartmentalOrganizationsNames_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentalOrganizationsNames_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentalOrganizationsNames_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentalOrganizationsNames_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentalOrganizationsNames_ListResponseValidationError{}

// Validate checks the field values on SportKinds_ListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SportKinds_ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SportKinds_ListRequestValidationError is the validation error returned by
// SportKinds_ListRequest.Validate if the designated constraints aren't met.
type SportKinds_ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SportKinds_ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SportKinds_ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SportKinds_ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SportKinds_ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SportKinds_ListRequestValidationError) ErrorName() string {
	return "SportKinds_ListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SportKinds_ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSportKinds_ListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SportKinds_ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SportKinds_ListRequestValidationError{}

// Validate checks the field values on SportKinds_ListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SportKinds_ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SportKinds_ListResponseValidationError{
				field:  "ListStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SportKinds_ListResponseValidationError is the validation error returned by
// SportKinds_ListResponse.Validate if the designated constraints aren't met.
type SportKinds_ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SportKinds_ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SportKinds_ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SportKinds_ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SportKinds_ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SportKinds_ListResponseValidationError) ErrorName() string {
	return "SportKinds_ListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SportKinds_ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSportKinds_ListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SportKinds_ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SportKinds_ListResponseValidationError{}
