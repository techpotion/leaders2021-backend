package pb

import (
	"context"
)

type SportsObjectORM struct {
	ObjectId                     uint32
	ObjectName                   string
	DepartmentalOrganizationId   uint32
	DepartmentalOrganizationName string
	SportsAreaId                 uint32
	SportsAreaName               string
	SportsAreaType               string
	Availability                 uint32
	SportKind                    string
}

// TableName overrides the default tablename generated by GORM
func (SportsObjectORM) TableName() string {
	return "sports_objects"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SportsObject) ToORM(ctx context.Context) (SportsObjectORM, error) {
	to := SportsObjectORM{}
	var err error
	if prehook, ok := interface{}(m).(SportsObjectWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ObjectId = m.ObjectId
	to.ObjectName = m.ObjectName
	to.DepartmentalOrganizationId = m.DepartmentalOrganizationId
	to.DepartmentalOrganizationName = m.DepartmentalOrganizationName
	to.SportsAreaId = m.SportsAreaId
	to.SportsAreaName = m.SportsAreaName
	to.SportsAreaType = m.SportsAreaType
	to.Availability = m.Availability
	to.SportKind = m.SportKind
	if posthook, ok := interface{}(m).(SportsObjectWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SportsObjectORM) ToPB(ctx context.Context) (SportsObject, error) {
	to := SportsObject{}
	var err error
	if prehook, ok := interface{}(m).(SportsObjectWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ObjectId = m.ObjectId
	to.ObjectName = m.ObjectName
	to.DepartmentalOrganizationId = m.DepartmentalOrganizationId
	to.DepartmentalOrganizationName = m.DepartmentalOrganizationName
	to.SportsAreaId = m.SportsAreaId
	to.SportsAreaName = m.SportsAreaName
	to.SportsAreaType = m.SportsAreaType
	to.Availability = m.Availability
	to.SportKind = m.SportKind
	if posthook, ok := interface{}(m).(SportsObjectWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SportsObject the arg will be the target, the caller the one being converted from

// SportsObjectWithBeforeToORM called before default ToORM code
type SportsObjectWithBeforeToORM interface {
	BeforeToORM(context.Context, *SportsObjectORM) error
}

// SportsObjectWithAfterToORM called after default ToORM code
type SportsObjectWithAfterToORM interface {
	AfterToORM(context.Context, *SportsObjectORM) error
}

// SportsObjectWithBeforeToPB called before default ToPB code
type SportsObjectWithBeforeToPB interface {
	BeforeToPB(context.Context, *SportsObject) error
}

// SportsObjectWithAfterToPB called after default ToPB code
type SportsObjectWithAfterToPB interface {
	AfterToPB(context.Context, *SportsObject) error
}
