syntax = "proto3";

package api;

option go_package = "gen/pb";

import "filters.proto";
import "sports_objects.proto";
import "geojsons.proto";
import "analytics.proto";
import "circles.proto";

import "common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Leaders 2021 Swagger"
        version: "1.0"
        contact: {
            name: "Tech Potion"
            url: "https://github.com/techpotion"
            email: "varlamow.col@yahoo.com"
        };
    };
    host: "89.178.239.84:3201",
    schemes: [HTTP, HTTPS]
    consumes: "application/json"
    produces: "application/json"
    responses: {
        key: "400";
        value: {
            description: "Returned when the request body does not match the API's specifications"
            schema: {
                json_schema: {
                    ref: ".api.ErrorResponse";
                }
            }
        }
    }
    responses: {
        key: "401";
        value: {
            description: "Returned when the user tries to login to a resource with an incorrect login info"
            schema: {
                json_schema: {
                    ref: ".api.ErrorResponse";
                }
            }
        }
    }
    responses: {
        key: "403";
        value: {
            description: "Returned when the user does not have permission to access the resource";
            schema: {
                json_schema: {
                    ref: ".api.ErrorResponse";
                }
            }
        }
    }
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist";
            schema: {
                json_schema: {
                    ref: ".api.ErrorResponse";
                }
            }
        }
    }
    responses: {
        key: "500";
        value: {
            description: "Internal server error";
            schema: {
                json_schema: {
                    ref: ".api.ErrorResponse";
                }
            }
        }
    }
};

service ApiService {
    // Sports Objects
    // List Sports Objects
    rpc ListSportsObjects(SportsObjects.ListRequest) returns (SportsObjects.ListResponse) {
        option (google.api.http) = {
            post: "/api/v1/ListSportsObjects";
            body: "*";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Sports Objects";
        };
    }

    // Get Sports Object
    rpc GetSportsObject(SportsObjects.GetRequest) returns (SportsObjects.GetResponse) {
        option (google.api.http) = {
            get: "/api/v1/GetSportsObject";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Sports Objects";
        };
    }

    // Sports Objects Detailed
    // List Sports Objects Detailed
    rpc ListSportsObjectsDetailed(SportsObjectsDetailed.ListRequest) returns (SportsObjectsDetailed.ListResponse) {
        option (google.api.http) = {
            post: "/api/v1/ListSportsObjectsDetailed";
            body: "*";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Sports Objects Detailed";
        };
    }

    // GeoJSONs
    // Getting Moscow regions polygons geojson
    rpc GetGeoJsonRegions(GeoJsons.Request) returns (GeoJsons.Response) {
        option (google.api.http) = {
            get: "/api/v1/GetGeoJsonRegions";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "GeoJsons";
        };
    }

    // Getting Moscow population density for heatmap drawing purposes
    rpc GetGeoJsonDensityHeatmap(GeoJsons.Request) returns (GeoJsons.Response) {
        option (google.api.http) = {
            get: "/api/v1/GetGeoJsonDensityHeatmap";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "GeoJsons";
        };
    }

    // Getting objects geojson for heatmap drawing purposes
    rpc GetGeoJsonSportsObjects(GeoJsons.Request) returns (GeoJsons.Response) {
        option (google.api.http) = {
            get: "/api/v1/GetGeoJsonSportsObjects";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "GeoJsons";
        };
    }

    // Analytics
    // Getting analytics for sports objects in polygon
    rpc PolygonAnalytics(PolygonAnalytics.Request) returns (PolygonAnalytics.Response) {
        option (google.api.http) = {
            post: "/api/v1/PolygonAnalytics";
            body: "*";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Analytics";
        };
    }

    // Getting analytics for parks overlaping
    rpc PolygonParkAnalytics(PolygonParkAnalytics.Request) returns (PolygonParkAnalytics.Response) {
        option (google.api.http) = {
            post: "/api/v1/PolygonParkAnalytics";
            body: "*";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Analytics";
        };
    }

    // Getting analytics for pollution situation
    rpc PolygonPollutionAnalytics(PolygonPollutionAnalytics.Request) returns (PolygonPollutionAnalytics.Response) {
        option (google.api.http) = {
            post: "/api/v1/PolygonPollutionAnalytics";
            body: "*";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Analytics";
        };
    }

    // Filters
    // Getting the list of unique object names
    rpc ListObjectsNames(ObjectsNames.ListRequest) returns (ObjectsNames.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListObjectsNames";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Getting the list of departmental organizations ids
    rpc ListDepartmentalOrganizationsIds(DepartmentalOrganizationsIds.ListRequest) returns (DepartmentalOrganizationsIds.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListDepartmentalOrganizationsIds";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Getting the list of departmental organizations names
    rpc ListDepartmentalOrganizationsNames(DepartmentalOrganizationsNames.ListRequest) returns (DepartmentalOrganizationsNames.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListDepartmentalOrganizationsNames";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Getting the list of sports area names
    rpc ListSportsAreaNames(SportsAreaNames.ListRequest) returns (SportsAreaNames.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListSportsAreaNames";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Getting the list of sports area types
    rpc ListSportsAreaTypes(SportsAreaTypes.ListRequest) returns (SportsAreaTypes.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListSportsAreaTypes";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Getting the list of departmental organizations names
    rpc ListSportKinds(SportKinds.ListRequest) returns (SportKinds.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListSportKinds";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Filters";
        };
    }

    // Circles
    // Getting the list of intersections polygons
    rpc ListIntersections(Intersections.ListRequest) returns (Intersections.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListIntersections";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Circles";
        };
    }

    // Getting the list of intersections polygons
    rpc ListUnions(Unions.ListRequest) returns (Unions.ListResponse) {
        option (google.api.http) = {
            get: "/api/v1/ListUnions";
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "";
            summary: "";
            tags: "Circles";
        };
    }
}
